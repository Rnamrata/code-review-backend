Identification:
- issueId (unique per issue)
- category (security, quality, complexity, style)
- type (SQL_INJECTION, WEAK_CRYPTO, HIGH_COMPLEXITY, etc.)

Severity & Priority:
- severity (critical, high, medium, low)
- priority (1-10)

Location:
- filename
- line number
- column (optional)
- function name (if applicable)

Description:
- title (short summary)
- description (detailed explanation)
- codeSnippet (affected code)
- impact (what could happen)

Standards References:
- cwe (Common Weakness Enumeration)
- owasp (OWASP category)
- rule (linter rule name)

Fix Information:
- fixDescription
- fixCodeExample
- difficultyLevel (easy, medium, hard)
- estimatedTime
- additionalChanges (array)

AI Insights:
- aiExplanation
- sources (from RAG)
- references (documentation links)

Methods needed:
- isCritical() → boolean
- getDisplaySeverity() → string with color
- getSortPriority() → number
- toJSON()
- validate()

Why structured issues:
- Consistent across analyzers
- Easy to filter/sort
- Clear display format
- Tracking and metrics